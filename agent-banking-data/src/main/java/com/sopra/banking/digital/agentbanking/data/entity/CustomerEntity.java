/**
 * This file was generated by the Jeddict
 */
package com.sopra.banking.digital.agentbanking.data.entity;

import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * @author relamrani
 */
@Entity
@EntityListeners({ CustomerListener.class })
public class CustomerEntity extends AbstractEntity {

	private static final long serialVersionUID = 1L;

	@Embedded
	private AddressEntity address;

	private AgentEntity agent;

	/**
	 * city of customer birthday
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "city of birthday cannot be null")
	private String cityOfBirth;

	/**
	 * country of customer birthday
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "country of birthday cannot be null")
	private String countryOfBirth;

	/**
	 * birthday date of customer
	 */

	@Basic
	@Temporal(TemporalType.DATE)
	private Date dateOfBirth;

	/**
	 * firstname of customer
	 */
	@Column(updatable = false, nullable = false)
	@Basic
	@NotNull(message = "firstname cannot be null")
	private String firstName;

	/**
	 * gender of customer
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "gender cannot be null")
	private String gender;

	@Column(nullable = false)
	@Basic
	@NotNull
	private Integer identityDocId;

	@Column(nullable = false)
	@Basic
	@NotNull
	private String identityDocType;

	@Basic
	@NotNull(message = "language cannot be null")
	private String language;

	/**
	 * lastname of customer
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "lastname cannot be null")
	private String lastName;

	/**
	 * nationality of customer
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "nationality cannot be null")
	private String nationality;

	@Column(nullable = false)
	@Basic
	@NotNull(message = "phone number cannnot be null")
	private String phoneNumber;

	@Column(nullable = false)
	@Basic
	@NotNull
	private String phoneType;

	/**
	 * record id for customer
	 */
	@Column(unique = true, nullable = false)
	@Basic
	private Integer recordId;

	/**
	 * residence of customer
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "customer residence cannot be null")
	private String residence;

	/**
	 * title for customer
	 */
	@Column(nullable = false)
	@Basic
	@NotNull(message = "title can not be null")
	private String title;

	/**
	 * constructor for jpa
	 */
	public CustomerEntity() {

	}

	/**
	 * 
	 * @param recordId
	 * @param agent
	 * @param title
	 * @param firstName
	 * @param lastName
	 * @param dateOfBirth
	 * @param countryOfBirth
	 * @param cityOfBirth
	 * @param gender
	 * @param nationality
	 * @param residence
	 * @param language
	 * @param phoneNumber
	 * @param phoneType
	 * @param identityDocType
	 * @param identityDocId
	 */
	public CustomerEntity(Integer recordId, AgentEntity agent, String title, String firstName, String lastName,
			Date dateOfBirth, String countryOfBirth, String cityOfBirth, String gender, String nationality,
			String residence, String language, String phoneNumber, String phoneType, String identityDocType,
			Integer identityDocId) {
		super();
		this.recordId = recordId;
		this.agent = agent;
		this.title = title;
		this.firstName = firstName;
		this.lastName = lastName;
		this.dateOfBirth = dateOfBirth;
		this.countryOfBirth = countryOfBirth;
		this.cityOfBirth = cityOfBirth;
		this.gender = gender;
		this.nationality = nationality;
		this.residence = residence;
		this.language = language;
		this.phoneNumber = phoneNumber;
		this.phoneType = phoneType;
		this.identityDocType = identityDocType;
		this.identityDocId = identityDocId;
	}

	public void copy(final CustomerEntity customer) {
		if (customer.title != null) {
			this.title = customer.title;
		}
		if (customer.residence != null) {
			this.residence = customer.residence;
		}
		if (customer.phoneType != null) {
			this.phoneType = customer.phoneType;
		}
		if (customer.phoneNumber != null) {
			this.phoneNumber = customer.phoneNumber;
		}
		if (customer.nationality != null) {
			this.nationality = customer.nationality;
		}
		if (customer.lastName != null) {
			this.lastName = customer.lastName;
		}
		if (customer.language != null) {
			this.language = customer.language;
		}
		if (customer.identityDocType != null) {
			this.identityDocType = customer.identityDocType;
		}
		if (customer.identityDocId != null) {
			this.identityDocId = customer.identityDocId;
		}
		if (customer.gender != null) {
			this.gender = customer.gender;
		}
		if (customer.firstName != null) {
			this.firstName = customer.firstName;
		}
		if (customer.dateOfBirth != null) {
			this.dateOfBirth = customer.dateOfBirth;
		}
		if (customer.countryOfBirth != null) {
			this.countryOfBirth = customer.countryOfBirth;
		}
		if (customer.cityOfBirth != null) {
			this.cityOfBirth = customer.cityOfBirth;
		}
		if (customer.address != null) {
			this.address = customer.address;
		}
	}

	public AddressEntity getAddress() {
		return address;
	}

	@ManyToOne
	@JsonIgnore
	public AgentEntity getAgent() {
		return agent;
	}

	public String getCityOfBirth() {
		return this.cityOfBirth;
	}

	public String getCountryOfBirth() {
		return this.countryOfBirth;
	}

	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public String getFirstName() {
		return this.firstName;
	}

	public String getGender() {
		return this.gender;
	}

	public Integer getIdentityDocId() {
		return identityDocId;
	}

	public String getIdentityDocType() {
		return identityDocType;
	}

	public String getLanguage() {
		return this.language;
	}

	public String getLastName() {
		return this.lastName;
	}

	public String getNationality() {
		return this.nationality;
	}

	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public String getPhoneType() {
		return phoneType;
	}

	public Integer getRecordId() {
		return this.recordId;
	}

	public String getResidence() {
		return this.residence;
	}

	public String getTitle() {
		return this.title;
	}

	public void setAddress(AddressEntity address) {
		this.address = address;
	}

	public void setAgent(AgentEntity agent) {
		this.agent = agent;
	}

	public void setCityOfBirth(String cityOfBirth) {
		this.cityOfBirth = cityOfBirth;
	}

	public void setCountryOfBirth(String countryOfBirth) {
		this.countryOfBirth = countryOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public void setIdentityDocId(Integer identityDocId) {
		this.identityDocId = identityDocId;
	}

	public void setIdentityDocType(String identityDocType) {
		this.identityDocType = identityDocType;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public void setPhoneType(String phoneType) {
		this.phoneType = phoneType;
	}

	public void setRecordId(Integer recordId) {
		this.recordId = recordId;
	}

	public void setResidence(String residence) {
		this.residence = residence;
	}

	public void setTitle(String title) {
		this.title = title;
	}
}
